'''
    Compares the timepoints of Alnaji2021 by a venn diagram.
    Analyzes the change of the slope of linear regression for Alanji2021 and
    Pelz.
'''
import os
import sys

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from scipy import stats
from matplotlib_venn import venn3
from decimal import Decimal, ROUND_HALF_UP
from sklearn.linear_model import LinearRegression

sys.path.insert(0, "..")
sys.path.insert(0, "../relative_occurrence_nucleotides")
sys.path.insert(0, "../direct_repeats")
sys.path.insert(0, "../regression_length_vs_occurrence")

from utils import DATAPATH, RESULTSPATH, SEGMENTS, COLORS
from utils import load_alnaji_2021, get_sequence, get_seq_len, get_stat_symbol, create_sequence_library, load_hpi14_alnaji, load_full_alnaji2021
from composition_junction_site import count_nucleotide_occurrence_overall, nucleotide_occurrence_analysis
from search_direct_repeats import count_direct_repeats_overall, include_correction
from regression_length_occurrence import linear_regression_analysis, format_dataset_for_plotting


def venn_different_timepoints(data: dict)-> None:
    '''
        Draws a venn diagramm for a given dataset with the groups built by 
        different timepoints (3hpi, 6hpi, 24hpi)
        :param data: dict of the dataset with the strain name as key and a
                     data frame as value
        
        :return: None
    '''
    for k, v in data.items():
        fig, axs = plt.subplots(4, 1, figsize=(8, 10), tight_layout=True)
        for i, t in enumerate(["3hpi", "6hpi", "24hpi", "all"]):
            if t == "all":
                set1 = set(v[v["Timepoint"] == "3hpi"]["DI"])
                set2 = set(v[v["Timepoint"] == "6hpi"]["DI"])
                set3 = set(v[v["Timepoint"] == "24hpi"]["DI"])
                labels = ("3hpi", "6hpi", "24hpi")
            else:
                v_t = v[v["Timepoint"] == t].copy()
                set1 = set(v_t[v_t["Replicate"] == "Rep1"]["DI"])
                set2 = set(v_t[v_t["Replicate"] == "Rep2"]["DI"])
                set3 = set(v_t[v_t["Replicate"] == "Rep3"]["DI"])
                labels = ("Rep1", "Rep2", "Rep3")

            venn3([set1, set2, set3], set_labels=labels, ax=axs[i])
            axs[i].set_title(f"{t}")

        fig.suptitle(f"overlap of replicates at different timepoints for {k}")
        
        save_path = os.path.join(RESULTSPATH, "PR8", f"venn_alnaji_timepoints_3_6_24.png")
        plt.savefig(save_path)
        plt.close()


def analyze_over_timepoints(df: pd.DataFrame)-> None:
    '''
        Analyzes the Alnaji 2021 data set over the 5 timepoints it has. First
        Shows the distribution of the segments along all five timepoints.
        Second plot shows the change of the slope generated by linear
        regression over time.
        :param df: data frame

        :return: None
    '''
    plt.rc("font", size=14)
    fig, ax = plt.subplots(1, 1, figsize=(5, 5), tight_layout=True)

    timepoints = list(df["Timepoint"].unique())
    timepoints.append(timepoints.pop(2)) # put 24hpi to the end

    x = [1, 2, 3, 4, 5, 6, 7, 8]
    for t in timepoints:
        t_df = df[df["Timepoint"] == t]
        grouped = t_df.groupby(["Segment", "Replicate"])
        counts = grouped.sum()["NGS_read_count"]
        counts = counts/sum(counts)

        y = list()
        err = list()
        for s in SEGMENTS:
            y.append(counts[s].sum())
            err.append(counts[s].std())
        ax.scatter(x, y, label=t)
        ax.errorbar(x, y, yerr=err)
    
    ax.set_xlabel(SEGMENTS)
    ax.legend()

    save_path = os.path.join(RESULTSPATH, "PR8", "Alnaji2021_all_timepoints_over_segments.png")
    plt.savefig(save_path)
    plt.close()

    # plot of slope (m) of linear regressions against time
    t_x = [3, 6, 14, 14, 24]
    m = list()
    err = list()
    for t in timepoints:
        t_df = df[df["Timepoint"] == t]
        m_temp = list()
        for r in ["Rep1", "Rep2", "Rep3"]:
            tr_df = t_df[t_df["Replicate"] == r]
            x, y, _, _ = format_dataset_for_plotting(tr_df, "PR8")
            model = LinearRegression().fit(x.reshape((-1, 1)), y)
            m_temp.append(model.coef_*10000)
        m.append(np.mean(m_temp))
        err.append(np.std(m_temp))

    fig, ax = plt.subplots(1, 1, figsize=(5, 3), tight_layout=True)
    ax.plot(t_x, m)
    ax.errorbar(t_x, m, yerr=err)
    ax.ticklabel_format(useOffset=False, useMathText=True)

    ax.set_xlabel("time [h]")
    ax.set_ylabel(f"slope (\u00D710\N{SUPERSCRIPT FOUR})")

    save_path = os.path.join(RESULTSPATH, "PR8", "Alnaji2021_slope_over_time.png")
    plt.savefig(save_path)
    plt.close()


def assign_label(row: pd.Series)-> str:
    '''
        Give the different de novo and gain/loss labels to a row of the pelz
        data set.
        :param row: a single row of the data set
        :return: string indicating the label/class
    '''
    start = row["VB3-Saat"]
    end = row["VB3-48"]

    if (start == 0 and end == 0):
        return "de_novo_loss"
    elif (start == 0 and end !=0):
        return "de_novo_gain"
    elif (start != 0 and start >= end):
        return "loss"
    elif (start != 0 and start < end):
        return "gain"
    else:
        print(start, end)
        return "unknown"

def pelz_analyze_over_time()-> None:
    '''
        Does a linear regression for each timepoint of the pelz data set and
        compares the change of the slope over time. Includes only the de novo
        candidates
    '''
    plt.rc("font", size=14)
    path = os.path.join(DATAPATH, "Pelz2021", "pelz_split_by_timepoints.xlsx")
    df = pd.read_excel(path, na_values="", keep_default_na=False)
    df["class"] = df.apply(assign_label, axis=1)

    t_x = [4.1, 4.6, 5.0, 7.0, 7.6, 8.1, 8.6, 9.1, 11.5, 12.6, 13.0, 16.0, 16.6, 17.1, 19.6, 20.6, 21.0, 21.6, 23.1, 23.6, 24.0, 24.6]
    m = list()
    for i in np.arange(1, 23):
        t_df = df.iloc[:, [0, 1, 2, i+3, -1]].copy()
        t_df = t_df.loc[t_df["class"].isin(["de_novo_loss", "de_novo_gain"])]
        t_df.columns = ["Segment", "Start", "End", "NGS_read_count", "class"]

        x, y, _, _ = format_dataset_for_plotting(t_df, "PR8")
        model = LinearRegression().fit(x.reshape((-1, 1)), y)
        m.append(model.coef_[0]*10000)

    fig, ax = plt.subplots(1, 1, figsize=(5, 3), tight_layout=True)
    ax.plot(t_x, m)
    ax.set_xlabel("time [h]")
    ax.set_ylabel(f"slope (\u00D710\N{SUPERSCRIPT FOUR})")

    save_path = os.path.join(RESULTSPATH, "PR8", "Pelz_slope_over_time.png")
    plt.savefig(save_path)
    plt.close()


if __name__ == "__main__":
    data_dict = load_alnaji_2021()
    venn_different_timepoints(data_dict)
    analyze_over_timepoints(load_full_alnaji2021()["PR8"])

    pelz_analyze_over_time()

